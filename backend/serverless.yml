org: dlb34
app: serverless-diary-app
service: serverless-diary-app
frameworkVersion: '3.32.2'

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-plugin-tracing
  - serverless-reqvalidator-plugin
  - serverless-aws-documentation

provider:
  name: aws
  runtime: nodejs14.x
  profile: default
  lambdaHashingVersion: '20201221'

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}

  tracing:
    lambda: true
    apiGateway: true

  environment:
    DIARYS_TABLE: diarys-${self:provider.stage}
    DIARYS_CREATED_AT_INDEX: CreatedAtIndex
    ATTACHMENT_S3_BUCKET: serverless-app-diary-images-dlb342${self:provider.stage}
    SIGNED_URL_EXPIRATION: 300

  logs:
    restApi: true

custom:
  documentation:
    api:
      info:
        version: v1.0.0
        title: Serverless Application Diary API
        description: Serverless application for diarys
    models:
      - name: CreateDiaryRequest
        contentType: application/json
        schema: 
          required:
            - name
            - dueDate
          properties:
            name:              
              type: string
              minLength: 1
            dueDate:
              type: string
      - name: UpdateDiaryRequest
        contentType: application/json
        schema:
          required:
            - name
            - dueDate
            - done
          properties:
            name:              
              type: string
              minLength: 1
            dueDate:
              type: string
            done:
              type: boolean

functions:

  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  GetDiarys:
    handler: src/lambda/http/getDiarys.handler
    events:
      - http:
          method: get
          path: diarys
          cors: true
          authorizer: Auth
    iamRoleStatementsName: role-serverless-getdiary--${self:provider.stage}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DIARYS_TABLE}
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
        Resource: 
          - '*'

  CreateDiary:
    handler: src/lambda/http/createDiary.handler
    events:
      - http:
          method: post
          path: diarys
          cors: true
          authorizer: Auth
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Create a new diary
            description: Create a new diary
            requestModels:
              'application/json': CreateDiaryRequest
    iamRoleStatementsName: role-serverless-creatediary--${self:provider.stage}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DIARYS_TABLE}
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
        Resource: 
          - '*'

  UpdateDiary:
    handler: src/lambda/http/updateDiary.handler
    events:
      - http:
          method: patch
          path: diarys/{diaryId}
          cors: true
          authorizer: Auth
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Update diary
            description: Update diary
            requestModels:
              'application/json': UpdateDiaryRequest
    iamRoleStatementsName: role-serverless-updatediary-${self:provider.stage}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DIARYS_TABLE}
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
        Resource: 
          - '*'

  DeleteDiary:
    handler: src/lambda/http/deleteDiary.handler
    events:
      - http:
          method: delete
          path: diarys/{diaryId}
          cors: true
          authorizer: Auth
    iamRoleStatementsName: role-serverless-deletediary-${self:provider.stage}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DIARYS_TABLE}
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
        Resource: 
          - '*'

  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: diarys/{diaryId}/attachment
          cors: true
          authorizer: Auth
    iamRoleStatementsName: serverless-s3-upload-role-${self:provider.stage}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DIARYS_TABLE}
      - Effect: Allow
        Action:
          - s3:*
        Resource: arn:aws:s3:::${self:provider.environment.ATTACHMENT_S3_BUCKET}/*
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
        Resource: 
          - '*'

resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,PUT,DELETE,PATCH'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi

    GatewayResponseDefault5XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,PUT,DELETE,PATCH'"
        ResponseType: DEFAULT_5XX
        RestApiId:
          Ref: ApiGatewayRestApi

    RequestBodyValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties:
        Name: 'request-body-validator'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false
    
    diarysTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: diaryId
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: diaryId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.DIARYS_TABLE}
        LocalSecondaryIndexes:
          - IndexName: ${self:provider.environment.DIARYS_CREATED_AT_INDEX}
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: createdAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL 

    AttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.ATTACHMENT_S3_BUCKET}
        PublicAccessBlockConfiguration:
          BlockPublicAcls: false
          BlockPublicPolicy: false
          IgnorePublicAcls: false
          RestrictPublicBuckets: false
        CorsConfiguration:
          CorsRules:
            - AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000

    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.ATTACHMENT_S3_BUCKET}/*'
        Bucket: !Ref AttachmentsBucket